{"version":3,"sources":["components/quotes/QuoteForm.module.css","components/UI/Card.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/AddNewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","useState","isEntering","setIsEntering","isValid","setIsValid","when","message","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","trim","length","onAddQuote","author","text","form","onFocus","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","AddNewQuote","useHttp","addQuote","sendRequest","state","history","useHistory","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,mBCArID,EAAOC,QAAU,CAAC,KAAO,qB,mGCGVC,EAHF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,eCsE/BC,EAlEG,SAACL,GACjB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBACrB,EAAoCE,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA6BF,oBAAS,GAAtC,mBAAOG,EAAP,KAAeC,EAAf,KAuBA,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CACEC,KAAMJ,EACNK,QAAS,iBAAM,sCAEjB,cAAC,IAAD,CACAD,MAASF,EACTG,QAAS,iBAAM,+CAEf,cAAC,EAAD,UACE,uBACEC,SAlCR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBb,EAAec,QAAQC,MACvCC,EAAcd,EAAaY,QAAQC,MAGL,IAAhCF,EAAcI,OAAOC,QAA8C,IAA9BF,EAAYC,OAAOC,QAIvDX,GAAW,GAChBb,EAAMyB,WAAW,CAAEC,OAAQP,EAAeQ,KAAML,KAJ9CT,GAAW,IA2BPZ,UAAWC,IAAQ0B,KACnBC,QArBU,WAChBlB,GAAc,IAiBV,UAKGX,EAAM8B,WACL,qBAAK7B,UAAWC,IAAQ6B,QAAxB,SACE,cAACC,EAAA,EAAD,MAGJ,sBAAK/B,UAAWC,IAAQ+B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK/B,OAEtC,sBAAKL,UAAWC,IAAQ+B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAK7B,OAEpC,qBAAKP,UAAWC,IAAQqC,QAAxB,SACE,wBAAQC,QAjCI,WACpB7B,GAAc,IAgC0BV,UAAU,MAA1C,kC,gBCxCGwC,UAjBK,WAClB,MAA+BC,YAAQC,KAA/BC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,MACfC,EAAUC,cAChBC,qBAAU,WACM,cAAVH,GACFC,EAAQG,KAAK,aAEd,CAACJ,IAIJ,OACE,cAAC,WAAD,UACE,cAAC,EAAD,CAAWf,UAAqB,YAAVe,EAAqBpB,WALvB,SAACyB,GACvBN,EAAYM","file":"static/js/4.79c3d895.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","import classes from \"./Card.module.css\";\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\nexport default Card;\n","import classes from \"./QuoteForm.module.css\";\nimport { Fragment } from \"react\";\nimport Card from \"../UI/Card\";\nimport { useRef, useState } from \"react\";\nimport { Prompt } from \"react-router\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\" ;\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const [isEntering, setIsEntering] = useState(false);\n  const [isValid,setIsValid] = useState(true) ; \n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n    \n    // optional: Could validate here\n    if (enteredAuthor.trim().length === 0 || enteredText.trim().length === 0 ){\n      setIsValid(false) ; \n      return ; \n    }\n    else setIsValid(true) ; \n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const formFocus = () => {\n    setIsEntering(true);\n  };\n\n  const submitHandler = () => {\n    setIsEntering(false);\n  };\n  return (\n    <Fragment>\n      <Prompt\n        when={isEntering}\n        message={() => \"Are you sure you want to leave ?\"}\n      />\n      <Prompt\n      when = {!isValid}\n      message={() => \"The quote and author name musn't be empty\"}\n      />\n      <Card>\n        <form\n          onSubmit={submitFormHandler}\n          className={classes.form}\n          onFocus={formFocus}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={submitHandler} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\nexport default QuoteForm;\n","import QuoteFrom from \"../components/quotes/QuoteForm\";\nimport { Fragment } from \"react\";\nimport useHttp from \"../hooks/useHttp\";\nimport { addQuote } from \"../lib/api\";\nimport { useHistory } from \"react-router\";\nimport { useEffect } from \"react\";\nconst AddNewQuote = () => {\n  const { sendRequest, state } = useHttp(addQuote);\n  const history = useHistory();\n  useEffect(() => {\n    if (state === \"completed\") {\n      history.push(\"/quotes\");\n    }\n  }, [state]);\n  const addQuoteHandler = (quoteData) => {\n    sendRequest(quoteData);\n  };\n  return (\n    <Fragment>\n      <QuoteFrom isLoading={state === \"pending\"} onAddQuote={addQuoteHandler} />\n    </Fragment>\n  );\n};\nexport default AddNewQuote;\n"],"sourceRoot":""}