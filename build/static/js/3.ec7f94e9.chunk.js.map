{"version":3,"sources":["components/quotes/SelectedQuote.module.css","components/comments/Comments.module.css","components/comments/CommentForm.module.css","components/comments/CommentList.module.css","components/comments/CommentItem.module.css","components/quotes/SelectedQuote.js","components/comments/CommentForm.js","components/comments/CommentItem.js","components/comments/CommentList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","SelectedQuote","props","className","classes","quote","text","author","CommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","error","state","useEffect","onAddedComment","form","onSubmit","event","preventDefault","enteredText","current","value","quoteId","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentList","comments","map","comment","indx","Comments","getAllComment","allComments","data","params","useParams","console","log","useCallback","useState","isAddingComment","setIsAddingComment","length","onClick","QuoteDetail","routeMatch","useRouteMatch","getSingleQuote","quoteDetail","path","exact","to","url"],"mappings":"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","file":"static/js/3.ec7f94e9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"SelectedQuote_quote__3WzNY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"CommentForm_form__2mEyy\",\"loading\":\"CommentForm_loading__G_-sH\",\"control\":\"CommentForm_control__3re5t\",\"actions\":\"CommentForm_actions__uoqb3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentList_comments__2YBeF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","import classes from \"./SelectedQuote.module.css\";\n\nconst SelectedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n        <p>{props.text}</p>\n        <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default SelectedQuote;\n","import classes from \"./CommentForm.module.css\";\nimport { useRef } from \"react\";\nimport useHttp from \"../../hooks/useHttp\";\nimport { addComment } from \"../../lib/api\";\nimport { useEffect } from \"react\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nconst CommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, error, state } = useHttp(addComment);\n  useEffect(() => {\n    if (state === \"completed\" && !error) {\n      props.onAddedComment();\n    }\n  }, [state, error, props.onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    sendRequest({ quoteId: props.quoteId, text: enteredText });\n  };\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {state === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default CommentForm;\n","import classes from \"./CommentItem.module.css\";\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\nexport default CommentItem;\n","import classes from \"./CommentList.module.css\";\nimport CommentItem from \"./CommentItem\";\nconst CommentList = (props) => {\n  const comments = props.comments.map((comment, indx) => (\n    <CommentItem text={comment.text} key={indx} />\n  ));\n  return <ul className={classes.comment}>{comments}</ul>;\n};\nexport default CommentList;\n","import classes from \"./Comments.module.css\";\nimport { useCallback, useState } from \"react\";\nimport CommentForm from \"./CommentForm\";\nimport useHttp from \"../../hooks/useHttp\";\nimport { getAllComment } from \"../../lib/api\";\nimport { useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentList from \"./CommentList\" ; \nconst Comments = () => {\n  const {\n    sendRequest,\n    data: allComments,\n    error,\n    state,\n  } = useHttp(getAllComment);\n  const params = useParams();\n  const quoteId = params.id;\n  console.log(params);\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const onAddedComment = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  let comments;\n  if (state === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (state === \"completed\" && allComments && allComments.length !== 0) {\n    comments = <CommentList comments={allComments} />;\n  }\n\n  if (state === \"completed\" && (!allComments || allComments.length === 0)) {\n    comments = <p className=\"centered\"> No comments were added yet!</p>;\n  }\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <CommentForm onAddedComment={onAddedComment} quoteId={quoteId} />\n      )}\n      {comments}\n    </section>\n  );\n};\nexport default Comments;\n","import { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport SelectedQuote from \"../components/quotes/SelectedQuote\";\nimport { useRouteMatch } from \"react-router\";\nimport { Route } from \"react-router\";\nimport { useParams } from \"react-router\";\nimport Comments from \"../components/comments/Comments\";\nimport useHttp from \"../hooks/useHttp\";\nimport { getSingleQuote } from \"../lib/api\";\nimport { useEffect } from \"react\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\n\nconst QuoteDetail = () => {\n  const routeMatch = useRouteMatch();\n  const params = useParams();\n  const quoteId = params.id;\n  const {\n    sendRequest,\n    data: quoteDetail,\n    error,\n    state,\n  } = useHttp(getSingleQuote, true);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (state === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (error) {\n    return <p className=\"centered\">{error}</p>;\n  }\n\n  if (!quoteDetail.text) {\n    return <p>No quote found!</p>;\n  }\n  return (\n    <Fragment>\n      <SelectedQuote text={quoteDetail.text} author={quoteDetail.author} />\n      <Route path={`${routeMatch.path}`} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${routeMatch.url}/comments`}>\n            Show Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${routeMatch.path}/comments`}>\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\nexport default QuoteDetail;\n"],"sourceRoot":""}